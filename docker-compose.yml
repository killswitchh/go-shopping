version: '3'
services:
    db:
      image: postgres:14.1-alpine
      container_name: 'go-docker_db'
      restart: always
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
      environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
      ports:
        - '5432:5432'
      volumes: 
        - db:/var/lib/postgresql/data
      networks:
        - go-docker-net
    api-order-service:
      image: go-docker-image:latest #Our go-docker image here
      container_name: 'go-docker_api-order-service'
      ports:
          - '3000:3000'
      volumes:
          - ./order-service/:/go/src/app/
          - ./order-service/go.mod:/go/src/app/go.mod
      restart: always
      depends_on:
        db:
          condition: service_healthy
      networks:
          - go-docker-net
    api-notification-service:
      image: go-docker-image:latest #Our go-docker image here
      container_name: 'go-docker_api-notification-service'
      ports:
          - '3001:3001'
      volumes:
          - ./notification-service/:/go/src/app/
          - ./notification-service/go.mod:/go/src/app/go.mod
      restart: always
      depends_on:
        db:
          condition: service_healthy
      networks:
          - go-docker-net
    rabbitmq:
      image: rabbitmq:3-management-alpine
      container_name: 'rabbitmq'
      ports:
          - 5672:5672
          - 15672:15672
      volumes:
          - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
          - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
          - rabbitmq_go_net
networks:
  go-docker-net:
    driver: bridge
  rabbitmq_go_net:
    driver: bridge
volumes:
  cache:
    driver: local
  db:
    driver: local