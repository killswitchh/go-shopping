version: "3.9"
services:
  rabbitmq:
    image: 'rabbitmq:3-management'
    container_name: 'rabbitmq'
    ports:
      - "8080:15672"
      - "5000:5673"
    volumes:
      - ./rabbit-mq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 15s
      retries: 5
  database:
    image: postgres
    container_name: 'go-docker_db'
    restart: always
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - SENDER_EMAIL=${SENDER_EMAIL}
    ports:
      - '5432:5432'
    volumes:
      - postgres-db:/var/lib/postgresql/data
  producer:
    container_name: 'order-service'
    build: ./order-service
    ports:
      - "5050:5050"
    volumes:
      - .:/usr/src/order-service
    command: go run main.go
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    environment:
      GIN_MODE: "release"
      GIN_HTTPS: "false"
      GIN_ADDR: "0.0.0.0"
      GIN_PORT: "5050"
      LOG_LEVEL: "debug"
      RMQ_URL: "amqp://guest:guest@rabbitmq:5673/"
      POSTGRES_HOST: database
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_NAME: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432?sslmode=disable"
  consumer:
    container_name: 'notification-service'
    build: ./notification-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    restart: on-failure
    environment:
      # Sample env variables for consumer
      LOG_LEVEL: "debug"
      RMQ_URL: "amqp://guest:guest@rabbitmq:5673/"

volumes:
  postgres-db:
